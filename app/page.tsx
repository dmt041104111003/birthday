"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useToast } from "@/components/ui/use-toast"
import { Cake, Gift, PartyPopper, Music, Heart } from "lucide-react"
import Confetti from "./components/confetti"
import InteractiveCake from "./components/interactive-cake"
import FloatingBalloons from "./components/floating-balloons"
import FunnyMessage from "./components/funny-message"
import ImageSlideshow from "./components/image-slideshow"
import TypewriterText from "./components/typewriter-text"
import AnimatedCharacters from "./components/animated-characters"

export default function BirthdayPage() {
  const [input, setInput] = useState("")
  const [showConfetti, setShowConfetti] = useState(false)
  const [showCake, setShowCake] = useState(false)
  const [showInteractiveCake, setShowInteractiveCake] = useState(false)
  const [message, setMessage] = useState<{
    text: string
    type: "success" | "error" | "warning"
  } | null>(null)
  const [attempts, setAttempts] = useState(0)
  const [funnyMessages, setFunnyMessages] = useState<string[]>([])
  const [showSlideshow, setShowSlideshow] = useState(false)
  const [showCharacters, setShowCharacters] = useState(false)
  const { toast } = useToast()

  const birthdayMessage =
    "Ch√∫c m·ª´ng sinh nh·∫≠t em y√™u! C·∫£m ∆°n em ƒë√£ ƒë·∫øn b√™n anh v√† l√†m cho cu·ªôc s·ªëng c·ªßa anh tr·ªü n√™n tuy·ªát v·ªùi h∆°n. Anh y√™u em r·∫•t nhi·ªÅu v√† mong r·∫±ng nƒÉm m·ªõi c·ªßa em s·∫Ω tr√†n ƒë·∫ßy ni·ªÅm vui, h·∫°nh ph√∫c v√† th√†nh c√¥ng!"

  const handleSubmit = () => {
    const cleanInput = input.trim().toLowerCase()
    setAttempts(attempts + 1)

    if (cleanInput === "hai kh√¥ng kh√¥ng s√°u") {
      setMessage({
        text: "‚úÖ ƒê√∫ng r·ªìi em! Ny a th√¥ng minh th·∫≠t!",
        type: "success",
      })
      setShowConfetti(true)
      setShowCake(true)
      setShowSlideshow(true)
      setShowCharacters(true)
      playSound("/sounds/success.mp3")
      toast({
        title: "Ch√∫c m·ª´ng! üéâ",
        description: "Em ƒë√£ tr·∫£ l·ªùi ƒë√∫ng! Ch√∫c m·ª´ng sinh nh·∫≠t nh√©!",
        variant: "default",
      })
    } else if (cleanInput === "2006") {
      setMessage({
        text: "‚ùå Sai r·ªìi em! Ph·∫£i nh·∫≠p 'hai kh√¥ng kh√¥ng s√°u' ch·ª© kh√¥ng ph·∫£i s·ªë '2006'",
        type: "error",
      })
      playSound("/sounds/wrong.mp3")
      addFunnyMessage("Em ph·∫£i ƒë·ªçc k·ªπ h∆∞·ªõng d·∫´n h∆°n nha!")
    } else {
      setMessage({
        text: "‚ùå Sai r·ªìi em! Ph·∫£i nh·∫≠p ƒë√∫ng nƒÉm sinh c·ªßa m√¨nh ch·ª©!",
        type: "error",
      })
      playSound("/sounds/wrong.mp3")

      // Add funny messages based on number of attempts
      if (attempts === 0) {
        addFunnyMessage("Em kh√¥ng nh·ªõ nƒÉm sinh c·ªßa m√¨nh √†? ü§î")
      } else if (attempts === 1) {
        addFunnyMessage("Th·ª≠ l·∫°i n√†o! G·ª£i √Ω: ƒê·ªçc b·∫±ng ch·ªØ nh√©! üòâ")
      } else if (attempts === 2) {
        addFunnyMessage("C√≤n ch·ªù g√¨ n·ªØa, nh·∫≠p 'hai kh√¥ng kh√¥ng s√°u' ƒëi! üòÇ")
      } else {
        addFunnyMessage("Em ƒë√∫ng l√† ƒë√°ng y√™u m√† h∆°i ng·ªë m·ªôt ch√∫t! ‚ù§Ô∏è")
      }
    }
  }

  const addFunnyMessage = (message: string) => {
    setFunnyMessages((prev) => [...prev, message])
    setTimeout(() => {
      setFunnyMessages((prev) => prev.slice(1))
    }, 5000)
  }

  const playSound = (soundPath: string) => {
    const audio = new Audio(soundPath)
    audio.play().catch((e) => console.error("Error playing sound:", e))
  }

  const resetGame = () => {
    setInput("")
    setShowConfetti(false)
    setShowCake(false)
    setShowSlideshow(false)
    setShowInteractiveCake(false)
    setShowCharacters(false)
    setMessage(null)
    setAttempts(0)
    setFunnyMessages([])
  }

  const handleThankYouClick = () => {
    setShowSlideshow(false)
    setShowInteractiveCake(true)
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-pink-200 via-purple-100 to-blue-200 flex flex-col items-center justify-center p-4 relative overflow-hidden">
      {showConfetti && <Confetti />}
      <FloatingBalloons />
      {showCharacters && <AnimatedCharacters />}

      <div className="max-w-md w-full bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-8 relative z-10 border-2 border-pink-300">
        <div className="flex items-center justify-center mb-6 text-pink-600">
          <PartyPopper className="mr-2 h-8 w-8" />
          <h1 className="text-3xl font-bold">Sinh Nh·∫≠t Vui V·∫ª!</h1>
          <PartyPopper className="ml-2 h-8 w-8" />
        </div>

        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-xl font-semibold flex items-center justify-center text-purple-700">
              <Cake className="mr-2 h-6 w-6" />
              Nh·∫≠p nƒÉm sinh c·ªßa em:
            </h2>
          </div>

          <div className="flex flex-col sm:flex-row gap-2">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Nh·∫≠p nƒÉm sinh e nh√©..."
              className="border-2 border-pink-300 focus:border-pink-500 focus:ring-pink-500 text-lg py-6"
              onKeyDown={(e) => e.key === "Enter" && handleSubmit()}
            />
            <Button
              onClick={handleSubmit}
              className="bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-bold py-6"
            >
              <Gift className="mr-2 h-5 w-5" /> G·ª≠i
            </Button>
          </div>

          {message && (
            <div
              className={`p-4 rounded-lg text-center text-lg font-medium ${
                message.type === "success"
                  ? "bg-green-100 text-green-700 border-2 border-green-300"
                  : "bg-red-100 text-red-700 border-2 border-red-300"
              }`}
            >
              {message.text}
            </div>
          )}

          {funnyMessages.map((msg, index) => (
            <FunnyMessage key={index} message={msg} />
          ))}
        </div>
      </div>

      {/* Slideshow and Typewriter Text - Only shown when correct answer is given */}
      {showSlideshow && (
        <div className="fixed inset-0 bg-black/70 flex flex-col items-center justify-center z-20 p-4">
          <div className="max-w-2xl w-full bg-white rounded-xl shadow-2xl overflow-hidden">
            <ImageSlideshow />
            <div className="p-6 bg-gradient-to-r from-pink-100 to-purple-100">
              <TypewriterText text={birthdayMessage} />
              <div className="mt-6 flex justify-center">
                <Button
                  onClick={handleThankYouClick}
                  className="bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white"
                >
                  <Heart className="mr-2 h-5 w-5" /> C·∫£m ∆°n
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Interactive Cake with Candle */}
      {showInteractiveCake && (
        <div className="fixed inset-0 bg-black/70 flex flex-col items-center justify-center z-20 p-4">
          <div className="max-w-2xl w-full bg-white rounded-xl shadow-2xl overflow-hidden p-8">
            <h2 className="text-2xl font-bold text-center text-pink-600 mb-10">Th·ªïi t·∫Øt n·∫øn v√† ∆∞·ªõc ƒëi·ªÅu ∆∞·ªõc!</h2>
            <InteractiveCake onComplete={resetGame} />
          </div>
        </div>
      )}

      {/* Regular Cake - shown if not showing interactive cake or slideshow */}
      {showCake && !showSlideshow && !showInteractiveCake && (
        <div className="mt-8 bg-white/80 backdrop-blur-sm rounded-2xl p-6 border-2 border-pink-300 max-w-md w-full">
          <div className="text-center mt-4">
            <Button
              onClick={resetGame}
              className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700"
            >
              <Music className="mr-2 h-5 w-5" /> Ch∆°i l·∫°i
            </Button>
          </div>
        </div>
      )}

      <div className="fixed bottom-4 text-center text-pink-700 font-medium flex items-center">
        <Heart className="h-5 w-5 mr-1 text-red-500" /> ƒê∆∞·ª£c t·∫°o v·ªõi t√¨nh y√™u d√†nh cho em!
      </div>
    </main>
  )
}
